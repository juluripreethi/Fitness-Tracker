import psycopg2
import pandas as pd
import streamlit as st

# Database connection details
DB_NAME = "Fitness_Tracker"
DB_USER = "postgres"
DB_PASSWORD = "1234"
DB_HOST = "localhost"

def connect_db():
    try:
        conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST)
        return conn
    except psycopg2.OperationalError as e:
        st.error(f"Database connection error: {e}")
        return None

# --- CRUD Principles: CREATE ---
def add_user(name, email, weight):
    conn = connect_db()
    if not conn: return False
    try:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO users (name, email, weight) VALUES (%s, %s, %s)", (name, email, weight))
        conn.commit()
        return True
    except psycopg2.DatabaseError as e:
        conn.rollback()
        st.error(f"Error adding user: {e}")
        return False
    finally:
        if conn: conn.close()

def add_friend(user_id, friend_id):
    conn = connect_db()
    if not conn: return False
    try:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO friends (user_id, friend_id) VALUES (%s, %s)", (user_id, friend_id))
        conn.commit()
        return True
    except psycopg2.DatabaseError as e:
        conn.rollback()
        st.error(f"Error adding friend: {e}")
        return False
    finally:
        if conn: conn.close()

def add_workout(user_id, date, duration, exercises):
    conn = connect_db()
    if not conn: return False
    try:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO workouts (user_id, workout_date, duration_minutes) VALUES (%s, %s, %s) RETURNING workout_id", (user_id, date, duration))
            workout_id = cur.fetchone()[0]
            
            for exercise in exercises:
                cur.execute(
                    "INSERT INTO exercises (workout_id, exercise_name, reps, sets, weight_lifted) VALUES (%s, %s, %s, %s, %s)",
                    (workout_id, exercise['name'], exercise['reps'], exercise['sets'], exercise['weight'])
                )
        conn.commit()
        return True
    except psycopg2.DatabaseError as e:
        conn.rollback()
        st.error(f"Error logging workout: {e}")
        return False
    finally:
        if conn: conn.close()

def add_goal(user_id, description, target_value):
    conn = connect_db()
    if not conn: return False
    try:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO goals (user_id, goal_description, target_value) VALUES (%s, %s, %s)", (user_id, description, target_value))
        conn.commit()
        return True
    except psycopg2.DatabaseError as e:
        conn.rollback()
        st.error(f"Error setting goal: {e}")
        return False
    finally:
        if conn: conn.close()

# --- CRUD Principles: READ ---
def get_all_users():
    conn = connect_db()
    if not conn: return pd.DataFrame()
    try:
        df = pd.read_sql("SELECT user_id, name FROM users", conn)
        return df
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching users: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def get_user_profile(user_id):
    conn = connect_db()
    if not conn: return None
    try:
        df = pd.read_sql("SELECT user_id, name, email, weight FROM users WHERE user_id = %s", conn, params=(user_id,))
        if not df.empty:
            return df.iloc[0].to_dict()
        return None
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching user profile: {e}")
        return None
    finally:
        if conn: conn.close()

def get_friends(user_id):
    conn = connect_db()
    if not conn: return pd.DataFrame()
    try:
        query = """
            SELECT T2.user_id as friend_id, T2.name as friend_name, T2.email
            FROM friends AS T1
            JOIN users AS T2 ON T1.friend_id = T2.user_id
            WHERE T1.user_id = %s;
        """
        df = pd.read_sql(query, conn, params=(user_id,))
        return df
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching friends: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def get_user_workouts(user_id):
    conn = connect_db()
    if not conn: return pd.DataFrame()
    try:
        query = """
            SELECT
                w.workout_date,
                w.duration_minutes,
                e.exercise_name,
                e.reps,
                e.sets,
                e.weight_lifted
            FROM workouts w
            JOIN exercises e ON w.workout_id = e.workout_id
            WHERE w.user_id = %s
            ORDER BY w.workout_date DESC;
        """
        df = pd.read_sql(query, conn, params=(user_id,))
        return df
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching workouts: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def get_leaderboard(user_id, metric):
    conn = connect_db()
    if not conn: return pd.DataFrame()
    
    # SQL query for leaderboard based on total workout minutes
    query = """
        WITH friend_workouts AS (
            SELECT
                u.user_id,
                u.name,
                SUM(w.duration_minutes) AS total_minutes
            FROM friends f
            JOIN workouts w ON f.friend_id = w.user_id
            JOIN users u ON u.user_id = f.friend_id
            WHERE f.user_id = %s
            GROUP BY u.user_id, u.name
        ), user_workouts AS (
            SELECT
                u.user_id,
                u.name,
                SUM(w.duration_minutes) AS total_minutes
            FROM users u
            JOIN workouts w ON u.user_id = w.user_id
            WHERE u.user_id = %s
            GROUP BY u.user_id, u.name
        )
        SELECT name, total_minutes, RANK() OVER (ORDER BY total_minutes DESC) AS rank
        FROM (
            SELECT * FROM friend_workouts
            UNION ALL
            SELECT * FROM user_workouts
        ) AS combined_workouts
        ORDER BY total_minutes DESC;
    """
    
    try:
        df = pd.read_sql(query, conn, params=(user_id, user_id))
        return df
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching leaderboard data: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()

def get_goals(user_id):
    conn = connect_db()
    if not conn: return pd.DataFrame()
    try:
        df = pd.read_sql("SELECT goal_description, target_value, is_completed FROM goals WHERE user_id = %s", conn, params=(user_id,))
        return df
    except psycopg2.DatabaseError as e:
        st.error(f"Error fetching goals: {e}")
        return pd.DataFrame()
    finally:
        if conn: conn.close()
